package fi.salminen.gpsmap;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Log;

/*
 * http://stackoverflow.com/questions/8828639/android-get-gps-location-via-a-service
 */
public class DatabaseService extends Service
{
	private static final String TAG = "DatabaseService";
	private PlacesDBAdapter mDbAdapter = null;
	
    /*
     * Called by system when bound to pass a Binder back. I treat Binders as
     * throw away objects.
     */
    @Override
    public IBinder onBind(Intent intent) {
		Log.i(TAG, "onBind");
        return new LocalBinder<DatabaseService>(this);
    }
    
//    /**
//     * Class for clients to access.  Because we know this service always
//     * runs in the same process as its clients, we don't need to deal with
//     * IPC.
//     */
//    public class LocalBinder extends Binder {
//        LocationService getService() {
//	          Log.i(TAG, "LocalBinder.getService");
//            return LocationService.this;
//        }
//    }
//    
//    @Override
//    public IBinder onBind(Intent intent) {
//	      Log.i(TAG, "onBind");
//        return mBinder;
//    }
//
//    // This is the object that receives interactions from clients.  See
//    // RemoteService for a more complete example.
//    private final IBinder mBinder = new LocalBinder();

    /*
     * Called when all Activities are unbound
     */
    public boolean onUnbind(Intent intent){
		Log.i(TAG, "onUnbind");
    	/*
    	 * I don't really need this
    	 * If you clean up here, you will need
    	 * to reinitialise in onBind(), ONCE,
    	 * when it is next called.
    	 */ 
    	return false;
    }
	
    
    
	@Override
	public int onStartCommand(Intent intent, int flags, int startId)
	{
		Log.i(TAG, "onStartCommand");
		super.onStartCommand(intent, flags, startId);       
		return START_STICKY;
	}
	
	@Override
	public void onCreate()
	{
		Log.i(TAG, "onCreate");
		initializeLocationManager();
		try {
			mLocationManager.requestLocationUpdates(
					LocationManager.NETWORK_PROVIDER, LOCATION_INTERVAL, LOCATION_DISTANCE,
					mLocationListeners[1]);
		} catch (java.lang.SecurityException ex) {
			Log.i(TAG, "fail to request location update, ignore", ex);
		} catch (IllegalArgumentException ex) {
			Log.d(TAG, "network provider does not exist, " + ex.getMessage());
		}
		try {
			mLocationManager.requestLocationUpdates(
					LocationManager.GPS_PROVIDER, LOCATION_INTERVAL, LOCATION_DISTANCE,
					mLocationListeners[0]);
		} catch (java.lang.SecurityException ex) {
			Log.i(TAG, "fail to request location update, ignore", ex);
		} catch (IllegalArgumentException ex) {
			Log.d(TAG, "gps provider does not exist " + ex.getMessage());
		}
	}
	
	@Override
	public void onDestroy()
	{
		Log.e(TAG, "onDestroy");
		super.onDestroy();
		if (mLocationManager != null) {
			for (int i = 0; i < mLocationListeners.length; i++) {
				try {
					mLocationManager.removeUpdates(mLocationListeners[i]);
				} catch (Exception ex) {
					Log.i(TAG, "fail to remove location listners, ignore", ex);
				}
			}
		}
	} 
	
	private void initializeLocationManager() {
		Log.e(TAG, "initializeLocationManager");
		if (mLocationManager == null) {
			mLocationManager = (LocationManager) getApplicationContext().getSystemService(Context.LOCATION_SERVICE);
		}
	}
}